package br.com.senai.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import javax.management.RuntimeErrorException;

import br.com.funcionario.model.Funcionario;

public class BaseDeDados {

	static String SQL_ADD = "insert into funcionario (nome, idade, email, genero, cpf, endereco, telefone, tipo, funcionarios_geridos) values (?, ?, ?,?, ?, ?, ?, ?, ?);";

	static String SQL_DELETE = "delete from funcionario where id = ?;";

	static String SQL_SELECT = "select * from funcionario;";

	static String SQL_SELECT_ID = "select * from funcionario where id = ?;";

	static String SQL_ALT = "update funcionario set nome = ?, idade = ?, email = ?, genero = ?, cpf = ?, endereco = ?, telefone = ?, tipo = ?, funcionarios_geridos = ? where id = ?;";
	
	private static Connection connection;

	static public Connection getConnection() {

		try {

			if (connection == null) {

				connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/controlefuncionarios", "root",
						"");

			}

		} catch (Exception e) {

			e.printStackTrace();

		}

		return connection;

	}

	public void fecharConexao() {
		try {
			getConnection().close();
		} catch (Exception e) {
			throw new RuntimeErrorException(null, "ocorreu um erro no encerramento da conexao");
		}
	}

	static public void cadastraFuncionario(Funcionario funcionario) {

		PreparedStatement psInsert = null;

		try {

			psInsert = getConnection().prepareStatement(SQL_ADD);

			psInsert.setString(1, funcionario.getNome());
			psInsert.setInt(2, funcionario.getIdade());
			psInsert.setString(3, funcionario.getEmail());
			psInsert.setString(4, String.valueOf(funcionario.getGenero()));
			psInsert.setString(5, funcionario.getCpf());
			psInsert.setString(6, funcionario.getEndereco());
			psInsert.setString(7, funcionario.getTelefone());
			psInsert.setString(8, String.valueOf(funcionario.getTipo()));
			psInsert.setInt(9, funcionario.getFuncionarios_geridos());
			psInsert.executeUpdate();
			psInsert.close();

		} catch (Exception e) {

			e.printStackTrace();
			throw new RuntimeException("Ocorreu um erro na insercao do Funcionario");

		} finally {

			liberar(psInsert);
		}

	}

	static public List listaFuncionario() {

		List<Funcionario> listaFuncionarios = new ArrayList<>();

		PreparedStatement psSelect = null;

		try {
			psSelect = getConnection().prepareStatement(SQL_SELECT);

			ResultSet rs = psSelect.executeQuery();

			while (rs.next()) {

				Funcionario funcionario = new Funcionario();

				funcionario.setNome(rs.getString("nome"));
				funcionario.setCpf(rs.getString("cpf"));
				funcionario.setEmail(rs.getString("email"));
				funcionario.setEndereco(rs.getString("endereco"));
				funcionario.setFuncionarios_geridos(rs.getInt("funcionarios_geridos"));
				funcionario.setGenero(rs.getString("genero").charAt(0));
				funcionario.setId(rs.getInt("id"));
				funcionario.setIdade(rs.getInt("idade"));
				funcionario.setTelefone(rs.getString("telefone"));

				listaFuncionarios.add(funcionario);

			}

		} catch (Exception e) {
		}
		return listaFuncionarios;

	}

	static public Funcionario listaFuncionarioPorCod(int id) {

		PreparedStatement psSelect = null;

		try {
			psSelect = getConnection().prepareStatement(SQL_SELECT_ID);

			psSelect.setInt(1, id);

			ResultSet rs = psSelect.executeQuery();

			while (rs.next()) {

				Funcionario funcionario = new Funcionario();

				funcionario.setNome(rs.getString("nome"));
				funcionario.setCpf(rs.getString("cpf"));
				funcionario.setEmail(rs.getString("email"));
				funcionario.setEndereco(rs.getString("endereco"));
				funcionario.setFuncionarios_geridos(rs.getInt("funcionarios_geridos"));
				funcionario.setGenero(rs.getString("genero").charAt(0));
				funcionario.setId(rs.getInt("id"));
				funcionario.setIdade(rs.getInt("idade"));
				funcionario.setTelefone(rs.getString("telefone"));

				return funcionario;

			}

		} catch (Exception e) {
		}
		return null;

	}

	static void liberar(PreparedStatement ps) {

		try {

			if (ps != null) {
				ps.close();
			}

		} catch (Exception e) {
			throw new RuntimeException("Ocorreu um erro na liberação do cursor");
		}

	}

	public static void deleteFuncionario(int idExcluir) {

		PreparedStatement psInsert = null;

		try {

			psInsert = getConnection().prepareStatement(SQL_DELETE);

			psInsert.setInt(1, idExcluir);

			psInsert.executeUpdate();
			psInsert.close();

		} catch (Exception e) {

			e.printStackTrace();
			throw new RuntimeException("Ocorreu um erro na deletecao do Funcionario");

		} finally {

			liberar(psInsert);
		}

	}

	static public void alterarFuncionario(Funcionario funcionario) {

		PreparedStatement psInsert = null;

		try {

			psInsert = getConnection().prepareStatement(SQL_ALT);

			psInsert.setString(1, funcionario.getNome());
			psInsert.setInt(2, funcionario.getIdade());
			psInsert.setString(3, funcionario.getEmail());
			psInsert.setString(4, String.valueOf(funcionario.getGenero()));
			psInsert.setString(5, funcionario.getCpf());
			psInsert.setString(6, funcionario.getEndereco());
			psInsert.setString(7, funcionario.getTelefone());
			psInsert.setString(8, String.valueOf(funcionario.getTipo()));
			psInsert.setInt(9, funcionario.getFuncionarios_geridos());
			psInsert.executeUpdate();
			psInsert.close();

		} catch (Exception e) {

			e.printStackTrace();
			throw new RuntimeException("Ocorreu um erro na insercao do Funcionario");

		} finally {

			liberar(psInsert);
		}

	}
	
}